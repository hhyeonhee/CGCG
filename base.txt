// | C 언어 개념 | C++에서는? |

// | `struct` 구조체 | C에서는 단순한 데이터 묶음이지만, C++에서는 멤버 함수도 포함 가능하고, 사실상 `class`와 거의 동일 (기본 접근제한자만 다름) |

// | 전역 함수 | C++에서는 관련 함수들을 **클래스 내부의 멤버 함수**로 만들 수 있음 (코드의 구조화와 재사용성 ↑) |

// | 포인터 | C++에서는 **참조(reference)**가 도입되어 포인터처럼 주소를 사용하지 않고도 값 전달이 가능. 포인터보다 안전하고 직관적 |

// | `malloc/free` | C++에서는 `new/delete` 연산자를 사용하며, **생성자와 소멸자**를 통해 객체의 초기화와 정리를 자동으로 관리 |

// | `#define` 매크로 | C++에서는 **상수(const)**와 **인라인 함수**가 매크로보다 더 안전하고 효율적 |

// | `printf` / `scanf` | C++에서는 타입 안정성이 좋은 `cout` / `cin`을 사용 (`<<`, `>>` 연산자 이용) |

// | 함수 포인터 | C++에서는 **함수 객체(functor)**나 **람다 함수(lambda)**를 이용해 더 유연하고 강력한 표현이 가능 |

// ───────────────────────────────────────────────────────────────────────

// 1. 클래스와 객체(Object-Oriented Programming)

//     C에서는 데이터와 함수를 분리했지만, C++에서는 데이터와 그 데이터를 다루는 함수(메서드)를 함께 묶는 클래스가 핵심입니다.

// 생성자(Constructor), 소멸자(Destructor)

// 접근제한자: private, public, protected

// 객체지향 3대 원칙: 캡슐화, 상속, 다형성

// 2. 참조 (Reference)와 포인터 차이 이해

// C++에서는 주소(&)를 넘기지 않아도 참조로 직접 접근 가능

// 참조는 null이 될 수 없고, 더 안전함

// 3. 함수 오버로딩과 연산자 오버로딩

// C에서는 같은 이름의 함수를 인자만 다르게 정의할 수 없음

// C++에서는 인자 수나 타입에 따라 함수를 구분 가능

// 연산자도 +, == 등을 직접 정의 가능

// 4. 표준 템플릿 라이브러리(STL)

//     C++만의 강력한 무기

//     vector, map, set, stack, queue 등 자료구조 내장

// 반복자(iterator), 알고리즘(sort, find) 등도 매우 유용

// 5. 템플릿 (template) — 제네릭 프로그래밍

//     여러 타입에 대해 하나의 함수 또는 클래스를 만들 수 있음

// 6. 스마트 포인터 (shared_ptr, unique_ptr)

//     C++11 이후 동적 메모리 관리에서 필수

//     메모리 누수 방지
    
// 7. 람다(lambda) 함수

//     익명 함수로, 함수 객체를 쉽게 생성

// 8. 예외 처리

//     C의 errno, return code보다 더 체계적인 에러 처리 가능

// 9. RAII (Resource Acquisition Is Initialization)

//     자원을 획득과 동시에 관리 → 소멸자에서 자원 해제

//     파일, 메모리, 뮤텍스 등을 안전하게 관리

